// Package gateway provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package gateway

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Emoji defines model for Emoji.
type Emoji struct {
	Emoji string `json:"emoji"`
}

// Error represents an error returned by the service
type Error struct {
	// Message error message
	Message string `json:"message"`

	// Slug error identifier
	Slug string `json:"slug"`

	// Status HTTP status code
	Status int `json:"status"`
}

// GetPresignedUploadURL defines model for GetPresignedUploadURL.
type GetPresignedUploadURL struct {
	ContentLength int    `json:"contentLength"`
	ContentType   string `json:"contentType"`
	Name          string `json:"name"`
}

// Icon defines model for Icon.
type Icon = Emoji

// Note defines model for Note.
type Note struct {
	Content        string     `json:"content"`
	CreatedTime    time.Time  `json:"createdTime"`
	Date           *time.Time `json:"date,omitempty"`
	ExternalURL    string     `json:"externalURL"`
	Icon           *Icon      `json:"icon,omitempty"`
	LastEditedTime time.Time  `json:"lastEditedTime"`
	Notebook       struct {
		Icon  *Icon              `json:"icon,omitempty"`
		Title string             `json:"title"`
		Uuid  openapi_types.UUID `json:"uuid"`
	} `json:"notebook"`
	Title string             `json:"title"`
	Uuid  openapi_types.UUID `json:"uuid"`
}

// NoteBase defines model for NoteBase.
type NoteBase struct {
	Content     *string    `json:"content,omitempty"`
	Date        *time.Time `json:"date,omitempty"`
	ExternalURL *string    `json:"externalURL,omitempty"`
	Icon        *Icon      `json:"icon,omitempty"`
	Notebook    *struct {
		Uuid *openapi_types.UUID `json:"uuid,omitempty"`
	} `json:"notebook,omitempty"`
	Title *string `json:"title,omitempty"`
}

// Notebook defines model for Notebook.
type Notebook struct {
	CreatedTime    time.Time          `json:"createdTime"`
	Description    string             `json:"description"`
	Icon           *Icon              `json:"icon,omitempty"`
	LastEditedTime time.Time          `json:"lastEditedTime"`
	NotesNumber    int                `json:"notesNumber"`
	Title          string             `json:"title"`
	Uuid           openapi_types.UUID `json:"uuid"`
}

// NotebookBase defines model for NotebookBase.
type NotebookBase struct {
	Description *string `json:"description,omitempty"`
	Icon        *Icon   `json:"icon,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// Notebooks represents a list of notebooks
type Notebooks struct {
	Notebooks []Notebook `json:"notebooks"`
}

// Notes represents a list of notes
type Notes struct {
	Notes []Note `json:"notes"`
}

// PatchNote defines model for PatchNote.
type PatchNote = NoteBase

// PatchNotebook defines model for PatchNotebook.
type PatchNotebook = NotebookBase

// PatchUser defines model for PatchUser.
type PatchUser = UserBase

// PostNote defines model for PostNote.
type PostNote = NoteBase

// PostNotebook defines model for PostNotebook.
type PostNotebook = NotebookBase

// PresignedUploadURL defines model for PresignedUploadURL.
type PresignedUploadURL struct {
	URL        string `json:"URL"`
	PutHeaders *[]struct {
		Name  string `json:"name"`
		Value string `json:"value"`
	} `json:"putHeaders,omitempty"`
	SignedGetURL string `json:"signedGetURL"`
	SignedPutURL string `json:"signedPutURL"`
}

// User defines model for User.
type User struct {
	AvatarURL string `json:"avatarURL"`
	Name      string `json:"name"`
	Role      string `json:"role"`
}

// UserBase defines model for UserBase.
type UserBase struct {
	AvatarURL *string `json:"avatarURL,omitempty"`
}

// NoteID defines model for NoteID.
type NoteID = openapi_types.UUID

// NotebookID defines model for NotebookID.
type NotebookID = openapi_types.UUID

// Page defines model for Page.
type Page = int

// PageSize defines model for PageSize.
type PageSize = int

// Sort defines model for Sort.
type Sort = string

// GetNotebooksParams defines parameters for GetNotebooks.
type GetNotebooksParams struct {
	// Sort represents a sort query parameter
	Sort *Sort `form:"sort,omitempty" json:"sort,omitempty"`

	// PageSize represents a page size query parameter
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Page represents an page number query parameter
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// GetNotebookNotesParams defines parameters for GetNotebookNotes.
type GetNotebookNotesParams struct {
	// Sort represents a sort query parameter
	Sort *Sort `form:"sort,omitempty" json:"sort,omitempty"`

	// PageSize represents a page size query parameter
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Page represents an page number query parameter
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// GetNotesParams defines parameters for GetNotes.
type GetNotesParams struct {
	// Sort represents a sort query parameter
	Sort *Sort `form:"sort,omitempty" json:"sort,omitempty"`

	// PageSize represents a page size query parameter
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Page represents an page number query parameter
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// GetPresignedUploadURLJSONRequestBody defines body for GetPresignedUploadURL for application/json ContentType.
type GetPresignedUploadURLJSONRequestBody = GetPresignedUploadURL

// CreateNotebookJSONRequestBody defines body for CreateNotebook for application/json ContentType.
type CreateNotebookJSONRequestBody = PostNotebook

// UpdateNotebookJSONRequestBody defines body for UpdateNotebook for application/json ContentType.
type UpdateNotebookJSONRequestBody = PatchNotebook

// CreateNoteJSONRequestBody defines body for CreateNote for application/json ContentType.
type CreateNoteJSONRequestBody = PostNote

// UpdateNoteJSONRequestBody defines body for UpdateNote for application/json ContentType.
type UpdateNoteJSONRequestBody = PatchNote

// UpdateCurrentUserJSONRequestBody defines body for UpdateCurrentUser for application/json ContentType.
type UpdateCurrentUserJSONRequestBody = PatchUser

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetPresignedUploadURL request with any body
	GetPresignedUploadURLWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetPresignedUploadURL(ctx context.Context, body GetPresignedUploadURLJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNotebooks request
	GetNotebooks(ctx context.Context, params *GetNotebooksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNotebook request with any body
	CreateNotebookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateNotebook(ctx context.Context, body CreateNotebookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNotebook request
	DeleteNotebook(ctx context.Context, notebookUUID NotebookID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNotebook request
	GetNotebook(ctx context.Context, notebookUUID NotebookID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNotebook request with any body
	UpdateNotebookWithBody(ctx context.Context, notebookUUID NotebookID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateNotebook(ctx context.Context, notebookUUID NotebookID, body UpdateNotebookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNotebookNotes request
	GetNotebookNotes(ctx context.Context, notebookUUID NotebookID, params *GetNotebookNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNotes request
	GetNotes(ctx context.Context, params *GetNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNote request with any body
	CreateNoteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateNote(ctx context.Context, body CreateNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNote request
	DeleteNote(ctx context.Context, noteUUID NoteID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNote request
	GetNote(ctx context.Context, noteUUID NoteID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNote request with any body
	UpdateNoteWithBody(ctx context.Context, noteUUID NoteID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateNote(ctx context.Context, noteUUID NoteID, body UpdateNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCurrentUser request
	GetCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCurrentUser request with any body
	UpdateCurrentUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCurrentUser(ctx context.Context, body UpdateCurrentUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetPresignedUploadURLWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPresignedUploadURLRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPresignedUploadURL(ctx context.Context, body GetPresignedUploadURLJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPresignedUploadURLRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNotebooks(ctx context.Context, params *GetNotebooksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNotebooksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNotebookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNotebookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNotebook(ctx context.Context, body CreateNotebookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNotebookRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNotebook(ctx context.Context, notebookUUID NotebookID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNotebookRequest(c.Server, notebookUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNotebook(ctx context.Context, notebookUUID NotebookID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNotebookRequest(c.Server, notebookUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNotebookWithBody(ctx context.Context, notebookUUID NotebookID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNotebookRequestWithBody(c.Server, notebookUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNotebook(ctx context.Context, notebookUUID NotebookID, body UpdateNotebookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNotebookRequest(c.Server, notebookUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNotebookNotes(ctx context.Context, notebookUUID NotebookID, params *GetNotebookNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNotebookNotesRequest(c.Server, notebookUUID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNotes(ctx context.Context, params *GetNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNotesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNoteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNoteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNote(ctx context.Context, body CreateNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNoteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNote(ctx context.Context, noteUUID NoteID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNoteRequest(c.Server, noteUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNote(ctx context.Context, noteUUID NoteID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNoteRequest(c.Server, noteUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNoteWithBody(ctx context.Context, noteUUID NoteID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNoteRequestWithBody(c.Server, noteUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNote(ctx context.Context, noteUUID NoteID, body UpdateNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNoteRequest(c.Server, noteUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCurrentUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCurrentUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCurrentUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCurrentUser(ctx context.Context, body UpdateCurrentUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCurrentUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetPresignedUploadURLRequest calls the generic GetPresignedUploadURL builder with application/json body
func NewGetPresignedUploadURLRequest(server string, body GetPresignedUploadURLJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetPresignedUploadURLRequestWithBody(server, "application/json", bodyReader)
}

// NewGetPresignedUploadURLRequestWithBody generates requests for GetPresignedUploadURL with any type of body
func NewGetPresignedUploadURLRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/images/presigned-upload-url")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNotebooksRequest generates requests for GetNotebooks
func NewGetNotebooksRequest(server string, params *GetNotebooksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notebooks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateNotebookRequest calls the generic CreateNotebook builder with application/json body
func NewCreateNotebookRequest(server string, body CreateNotebookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateNotebookRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateNotebookRequestWithBody generates requests for CreateNotebook with any type of body
func NewCreateNotebookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notebooks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNotebookRequest generates requests for DeleteNotebook
func NewDeleteNotebookRequest(server string, notebookUUID NotebookID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "notebookUUID", runtime.ParamLocationPath, notebookUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notebooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNotebookRequest generates requests for GetNotebook
func NewGetNotebookRequest(server string, notebookUUID NotebookID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "notebookUUID", runtime.ParamLocationPath, notebookUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notebooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateNotebookRequest calls the generic UpdateNotebook builder with application/json body
func NewUpdateNotebookRequest(server string, notebookUUID NotebookID, body UpdateNotebookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNotebookRequestWithBody(server, notebookUUID, "application/json", bodyReader)
}

// NewUpdateNotebookRequestWithBody generates requests for UpdateNotebook with any type of body
func NewUpdateNotebookRequestWithBody(server string, notebookUUID NotebookID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "notebookUUID", runtime.ParamLocationPath, notebookUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notebooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNotebookNotesRequest generates requests for GetNotebookNotes
func NewGetNotebookNotesRequest(server string, notebookUUID NotebookID, params *GetNotebookNotesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "notebookUUID", runtime.ParamLocationPath, notebookUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notebooks/%s/notes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNotesRequest generates requests for GetNotes
func NewGetNotesRequest(server string, params *GetNotesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateNoteRequest calls the generic CreateNote builder with application/json body
func NewCreateNoteRequest(server string, body CreateNoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateNoteRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateNoteRequestWithBody generates requests for CreateNote with any type of body
func NewCreateNoteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNoteRequest generates requests for DeleteNote
func NewDeleteNoteRequest(server string, noteUUID NoteID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "noteUUID", runtime.ParamLocationPath, noteUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNoteRequest generates requests for GetNote
func NewGetNoteRequest(server string, noteUUID NoteID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "noteUUID", runtime.ParamLocationPath, noteUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateNoteRequest calls the generic UpdateNote builder with application/json body
func NewUpdateNoteRequest(server string, noteUUID NoteID, body UpdateNoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNoteRequestWithBody(server, noteUUID, "application/json", bodyReader)
}

// NewUpdateNoteRequestWithBody generates requests for UpdateNote with any type of body
func NewUpdateNoteRequestWithBody(server string, noteUUID NoteID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "noteUUID", runtime.ParamLocationPath, noteUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCurrentUserRequest generates requests for GetCurrentUser
func NewGetCurrentUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCurrentUserRequest calls the generic UpdateCurrentUser builder with application/json body
func NewUpdateCurrentUserRequest(server string, body UpdateCurrentUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCurrentUserRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateCurrentUserRequestWithBody generates requests for UpdateCurrentUser with any type of body
func NewUpdateCurrentUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetPresignedUploadURL request with any body
	GetPresignedUploadURLWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPresignedUploadURLResponse, error)

	GetPresignedUploadURLWithResponse(ctx context.Context, body GetPresignedUploadURLJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPresignedUploadURLResponse, error)

	// GetNotebooks request
	GetNotebooksWithResponse(ctx context.Context, params *GetNotebooksParams, reqEditors ...RequestEditorFn) (*GetNotebooksResponse, error)

	// CreateNotebook request with any body
	CreateNotebookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNotebookResponse, error)

	CreateNotebookWithResponse(ctx context.Context, body CreateNotebookJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNotebookResponse, error)

	// DeleteNotebook request
	DeleteNotebookWithResponse(ctx context.Context, notebookUUID NotebookID, reqEditors ...RequestEditorFn) (*DeleteNotebookResponse, error)

	// GetNotebook request
	GetNotebookWithResponse(ctx context.Context, notebookUUID NotebookID, reqEditors ...RequestEditorFn) (*GetNotebookResponse, error)

	// UpdateNotebook request with any body
	UpdateNotebookWithBodyWithResponse(ctx context.Context, notebookUUID NotebookID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNotebookResponse, error)

	UpdateNotebookWithResponse(ctx context.Context, notebookUUID NotebookID, body UpdateNotebookJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNotebookResponse, error)

	// GetNotebookNotes request
	GetNotebookNotesWithResponse(ctx context.Context, notebookUUID NotebookID, params *GetNotebookNotesParams, reqEditors ...RequestEditorFn) (*GetNotebookNotesResponse, error)

	// GetNotes request
	GetNotesWithResponse(ctx context.Context, params *GetNotesParams, reqEditors ...RequestEditorFn) (*GetNotesResponse, error)

	// CreateNote request with any body
	CreateNoteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNoteResponse, error)

	CreateNoteWithResponse(ctx context.Context, body CreateNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNoteResponse, error)

	// DeleteNote request
	DeleteNoteWithResponse(ctx context.Context, noteUUID NoteID, reqEditors ...RequestEditorFn) (*DeleteNoteResponse, error)

	// GetNote request
	GetNoteWithResponse(ctx context.Context, noteUUID NoteID, reqEditors ...RequestEditorFn) (*GetNoteResponse, error)

	// UpdateNote request with any body
	UpdateNoteWithBodyWithResponse(ctx context.Context, noteUUID NoteID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNoteResponse, error)

	UpdateNoteWithResponse(ctx context.Context, noteUUID NoteID, body UpdateNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNoteResponse, error)

	// GetCurrentUser request
	GetCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCurrentUserResponse, error)

	// UpdateCurrentUser request with any body
	UpdateCurrentUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCurrentUserResponse, error)

	UpdateCurrentUserWithResponse(ctx context.Context, body UpdateCurrentUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCurrentUserResponse, error)
}

type GetPresignedUploadURLResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PresignedUploadURL
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetPresignedUploadURLResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPresignedUploadURLResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNotebooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Notebooks
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetNotebooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNotebooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNotebookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreateNotebookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNotebookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNotebookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteNotebookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNotebookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNotebookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Notebook
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetNotebookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNotebookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNotebookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UpdateNotebookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNotebookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNotebookNotesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Notes
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetNotebookNotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNotebookNotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNotesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Notes
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetNotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreateNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Note
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UpdateNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCurrentUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetCurrentUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCurrentUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCurrentUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UpdateCurrentUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCurrentUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetPresignedUploadURLWithBodyWithResponse request with arbitrary body returning *GetPresignedUploadURLResponse
func (c *ClientWithResponses) GetPresignedUploadURLWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPresignedUploadURLResponse, error) {
	rsp, err := c.GetPresignedUploadURLWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPresignedUploadURLResponse(rsp)
}

func (c *ClientWithResponses) GetPresignedUploadURLWithResponse(ctx context.Context, body GetPresignedUploadURLJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPresignedUploadURLResponse, error) {
	rsp, err := c.GetPresignedUploadURL(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPresignedUploadURLResponse(rsp)
}

// GetNotebooksWithResponse request returning *GetNotebooksResponse
func (c *ClientWithResponses) GetNotebooksWithResponse(ctx context.Context, params *GetNotebooksParams, reqEditors ...RequestEditorFn) (*GetNotebooksResponse, error) {
	rsp, err := c.GetNotebooks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNotebooksResponse(rsp)
}

// CreateNotebookWithBodyWithResponse request with arbitrary body returning *CreateNotebookResponse
func (c *ClientWithResponses) CreateNotebookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNotebookResponse, error) {
	rsp, err := c.CreateNotebookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNotebookResponse(rsp)
}

func (c *ClientWithResponses) CreateNotebookWithResponse(ctx context.Context, body CreateNotebookJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNotebookResponse, error) {
	rsp, err := c.CreateNotebook(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNotebookResponse(rsp)
}

// DeleteNotebookWithResponse request returning *DeleteNotebookResponse
func (c *ClientWithResponses) DeleteNotebookWithResponse(ctx context.Context, notebookUUID NotebookID, reqEditors ...RequestEditorFn) (*DeleteNotebookResponse, error) {
	rsp, err := c.DeleteNotebook(ctx, notebookUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNotebookResponse(rsp)
}

// GetNotebookWithResponse request returning *GetNotebookResponse
func (c *ClientWithResponses) GetNotebookWithResponse(ctx context.Context, notebookUUID NotebookID, reqEditors ...RequestEditorFn) (*GetNotebookResponse, error) {
	rsp, err := c.GetNotebook(ctx, notebookUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNotebookResponse(rsp)
}

// UpdateNotebookWithBodyWithResponse request with arbitrary body returning *UpdateNotebookResponse
func (c *ClientWithResponses) UpdateNotebookWithBodyWithResponse(ctx context.Context, notebookUUID NotebookID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNotebookResponse, error) {
	rsp, err := c.UpdateNotebookWithBody(ctx, notebookUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNotebookResponse(rsp)
}

func (c *ClientWithResponses) UpdateNotebookWithResponse(ctx context.Context, notebookUUID NotebookID, body UpdateNotebookJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNotebookResponse, error) {
	rsp, err := c.UpdateNotebook(ctx, notebookUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNotebookResponse(rsp)
}

// GetNotebookNotesWithResponse request returning *GetNotebookNotesResponse
func (c *ClientWithResponses) GetNotebookNotesWithResponse(ctx context.Context, notebookUUID NotebookID, params *GetNotebookNotesParams, reqEditors ...RequestEditorFn) (*GetNotebookNotesResponse, error) {
	rsp, err := c.GetNotebookNotes(ctx, notebookUUID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNotebookNotesResponse(rsp)
}

// GetNotesWithResponse request returning *GetNotesResponse
func (c *ClientWithResponses) GetNotesWithResponse(ctx context.Context, params *GetNotesParams, reqEditors ...RequestEditorFn) (*GetNotesResponse, error) {
	rsp, err := c.GetNotes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNotesResponse(rsp)
}

// CreateNoteWithBodyWithResponse request with arbitrary body returning *CreateNoteResponse
func (c *ClientWithResponses) CreateNoteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNoteResponse, error) {
	rsp, err := c.CreateNoteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNoteResponse(rsp)
}

func (c *ClientWithResponses) CreateNoteWithResponse(ctx context.Context, body CreateNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNoteResponse, error) {
	rsp, err := c.CreateNote(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNoteResponse(rsp)
}

// DeleteNoteWithResponse request returning *DeleteNoteResponse
func (c *ClientWithResponses) DeleteNoteWithResponse(ctx context.Context, noteUUID NoteID, reqEditors ...RequestEditorFn) (*DeleteNoteResponse, error) {
	rsp, err := c.DeleteNote(ctx, noteUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNoteResponse(rsp)
}

// GetNoteWithResponse request returning *GetNoteResponse
func (c *ClientWithResponses) GetNoteWithResponse(ctx context.Context, noteUUID NoteID, reqEditors ...RequestEditorFn) (*GetNoteResponse, error) {
	rsp, err := c.GetNote(ctx, noteUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNoteResponse(rsp)
}

// UpdateNoteWithBodyWithResponse request with arbitrary body returning *UpdateNoteResponse
func (c *ClientWithResponses) UpdateNoteWithBodyWithResponse(ctx context.Context, noteUUID NoteID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNoteResponse, error) {
	rsp, err := c.UpdateNoteWithBody(ctx, noteUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNoteResponse(rsp)
}

func (c *ClientWithResponses) UpdateNoteWithResponse(ctx context.Context, noteUUID NoteID, body UpdateNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNoteResponse, error) {
	rsp, err := c.UpdateNote(ctx, noteUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNoteResponse(rsp)
}

// GetCurrentUserWithResponse request returning *GetCurrentUserResponse
func (c *ClientWithResponses) GetCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCurrentUserResponse, error) {
	rsp, err := c.GetCurrentUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCurrentUserResponse(rsp)
}

// UpdateCurrentUserWithBodyWithResponse request with arbitrary body returning *UpdateCurrentUserResponse
func (c *ClientWithResponses) UpdateCurrentUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCurrentUserResponse, error) {
	rsp, err := c.UpdateCurrentUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCurrentUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateCurrentUserWithResponse(ctx context.Context, body UpdateCurrentUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCurrentUserResponse, error) {
	rsp, err := c.UpdateCurrentUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCurrentUserResponse(rsp)
}

// ParseGetPresignedUploadURLResponse parses an HTTP response from a GetPresignedUploadURLWithResponse call
func ParseGetPresignedUploadURLResponse(rsp *http.Response) (*GetPresignedUploadURLResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPresignedUploadURLResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PresignedUploadURL
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNotebooksResponse parses an HTTP response from a GetNotebooksWithResponse call
func ParseGetNotebooksResponse(rsp *http.Response) (*GetNotebooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNotebooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Notebooks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateNotebookResponse parses an HTTP response from a CreateNotebookWithResponse call
func ParseCreateNotebookResponse(rsp *http.Response) (*CreateNotebookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNotebookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteNotebookResponse parses an HTTP response from a DeleteNotebookWithResponse call
func ParseDeleteNotebookResponse(rsp *http.Response) (*DeleteNotebookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNotebookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNotebookResponse parses an HTTP response from a GetNotebookWithResponse call
func ParseGetNotebookResponse(rsp *http.Response) (*GetNotebookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNotebookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Notebook
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateNotebookResponse parses an HTTP response from a UpdateNotebookWithResponse call
func ParseUpdateNotebookResponse(rsp *http.Response) (*UpdateNotebookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateNotebookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNotebookNotesResponse parses an HTTP response from a GetNotebookNotesWithResponse call
func ParseGetNotebookNotesResponse(rsp *http.Response) (*GetNotebookNotesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNotebookNotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Notes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNotesResponse parses an HTTP response from a GetNotesWithResponse call
func ParseGetNotesResponse(rsp *http.Response) (*GetNotesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Notes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateNoteResponse parses an HTTP response from a CreateNoteWithResponse call
func ParseCreateNoteResponse(rsp *http.Response) (*CreateNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteNoteResponse parses an HTTP response from a DeleteNoteWithResponse call
func ParseDeleteNoteResponse(rsp *http.Response) (*DeleteNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetNoteResponse parses an HTTP response from a GetNoteWithResponse call
func ParseGetNoteResponse(rsp *http.Response) (*GetNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Note
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateNoteResponse parses an HTTP response from a UpdateNoteWithResponse call
func ParseUpdateNoteResponse(rsp *http.Response) (*UpdateNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCurrentUserResponse parses an HTTP response from a GetCurrentUserWithResponse call
func ParseGetCurrentUserResponse(rsp *http.Response) (*GetCurrentUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCurrentUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateCurrentUserResponse parses an HTTP response from a UpdateCurrentUserWithResponse call
func ParseUpdateCurrentUserResponse(rsp *http.Response) (*UpdateCurrentUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCurrentUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
